{"version":3,"file":"static/js/630.2e2ed8b0.chunk.js","mappings":"4JAMA,IAJqB,SAAHA,GAAqB,IAAfC,EAAOD,EAAPC,QACtB,OAAOC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,QAAOC,SAAEH,GAC/B,C,+GCYMI,GAAmBC,EAAAA,EAAAA,OAAK,kBAAM,6BAAgC,IAmDpE,UAjDwB,WAAO,IAADC,EAAAC,EACpBC,GAAWC,EAAAA,EAAAA,MAAXD,OACFE,GAAWC,EAAAA,EAAAA,MACXC,GAAeC,EAAAA,EAAAA,QAA2B,QAArBP,EAAe,QAAfC,EAACG,EAASI,aAAK,IAAAP,OAAA,EAAdA,EAAgBQ,YAAI,IAAAT,EAAAA,EAAI,KAG9CU,GAAcC,EAAAA,EAAAA,KAAY,SAAAH,GAAK,OAAIA,EAAME,YAAYE,eAAe,IACpEC,GAAYF,EAAAA,EAAAA,KAAY,SAAAH,GAAK,OAAIA,EAAME,YAAYG,SAAS,IAC5DC,GAAQH,EAAAA,EAAAA,KAAY,SAAAH,GAAK,OAAIA,EAAME,YAAYI,KAAK,IACpDC,GAAWC,EAAAA,EAAAA,MAYjB,OAPAC,EAAAA,EAAAA,YAAU,WAEHf,GAELa,GAASG,EAAAA,EAAAA,GAAmBhB,GAC9B,GAAG,CAACA,EAAQa,KAGVI,EAAAA,EAAAA,MAAA,OAAAtB,SAAA,EACEF,EAAAA,EAAAA,KAACyB,EAAAA,GAAI,CAACC,GAAIf,EAAagB,QAAQzB,SAAC,YAE/BgB,IAAalB,EAAAA,EAAAA,KAAC4B,EAAAA,EAAM,IACpBT,IAASnB,EAAAA,EAAAA,KAAC6B,EAAAA,EAAY,CAAC9B,QAASoB,IAChB,OAAhBJ,IACCS,EAAAA,EAAAA,MAAA,OAAAtB,SAAA,EACEsB,EAAAA,EAAAA,MAAA,MAAAtB,SAAA,CAAI,eAAaa,EAAYe,UAC7BN,EAAAA,EAAAA,MAAA,KAAAtB,SAAA,CAAG,cAAYa,EAAYgB,YAI/B/B,EAAAA,EAAAA,KAAA,OAAAE,UACEF,EAAAA,EAAAA,KAACgC,EAAAA,GAAO,CAACN,GAAG,WAAWzB,UAAU,cAAaC,SAAC,gBAKjDF,EAAAA,EAAAA,KAACiC,EAAAA,SAAQ,CAACC,UAAUlC,EAAAA,EAAAA,KAAC4B,EAAAA,EAAM,IAAI1B,UAC7BF,EAAAA,EAAAA,KAACmC,EAAAA,GAAM,CAAAjC,UACLF,EAAAA,EAAAA,KAACoC,EAAAA,GAAK,CAACC,KAAK,WAAWC,SAAStC,EAAAA,EAAAA,KAACG,EAAgB,YAK3D,C","sources":["components/ErrorMessage.jsx","pages/PostDetailsPage.jsx"],"sourcesContent":["import React from 'react';\n\nconst ErrorMessage = ({ message }) => {\n  return <p className=\"error\">{message}</p>;\n};\n\nexport default ErrorMessage;\n","import React, { Suspense, lazy, useEffect, useRef } from 'react';\nimport {\n  Link,\n  NavLink,\n  Route,\n  Routes,\n  useLocation,\n  useParams,\n} from 'react-router-dom';\n\nimport Loader from 'components/Loader';\nimport ErrorMessage from 'components/ErrorMessage';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { requestPostDetails } from 'redux/postDetailReducer';\n\nconst PostCommentsPage = lazy(() => import('pages/PostCommentsPage'));\n\nconst PostDetailsPage = () => {\n  const { postId } = useParams();\n  const location = useLocation();\n  const backLinkHref = useRef(location.state?.from ?? '/');\n\n  // пілписка на дані зі стору\n  const postDetails = useSelector(state => state.postDetails.postDetailsData);\n  const isLoading = useSelector(state => state.postDetails.isLoading);\n  const error = useSelector(state => state.postDetails.error);\n  const dispatch = useDispatch();\n  // const [postDetails, setPostDetails] = useState(null);\n  // const [isLoading, setIsLoading] = useState(false);\n  // const [error, setError] = useState(null);\n\n  useEffect(() => {\n    // коли у нас не прийде id поста, ми його просто відхиляємо, виходом з функції\n    if (!postId) return;\n    // thunk можна діспатчити, і дані які будуть у неї передані, прийдуть першим аргументои у async\n    dispatch(requestPostDetails(postId));\n  }, [postId, dispatch]);\n\n  return (\n    <div>\n      <Link to={backLinkHref.current}>Go Back</Link>\n\n      {isLoading && <Loader />}\n      {error && <ErrorMessage message={error} />}\n      {postDetails !== null && (\n        <div>\n          <h2>Post Title: {postDetails.title}</h2>\n          <p>Post Body: {postDetails.body}</p>\n        </div>\n      )}\n\n      <div>\n        <NavLink to=\"comments\" className=\"header-link\">\n          Comments\n        </NavLink>\n      </div>\n\n      <Suspense fallback={<Loader />}>\n        <Routes>\n          <Route path=\"comments\" element={<PostCommentsPage />} />\n        </Routes>\n      </Suspense>\n    </div>\n  );\n};\n\nexport default PostDetailsPage;\n"],"names":["_ref","message","_jsx","className","children","PostCommentsPage","lazy","_location$state$from","_location$state","postId","useParams","location","useLocation","backLinkHref","useRef","state","from","postDetails","useSelector","postDetailsData","isLoading","error","dispatch","useDispatch","useEffect","requestPostDetails","_jsxs","Link","to","current","Loader","ErrorMessage","title","body","NavLink","Suspense","fallback","Routes","Route","path","element"],"sourceRoot":""}